module TestEigenmodes
using Muscade,Test,SparseArrays,Random,LinearAlgebra

"""
    m = MAC(u,v)

Compute the Modal Assurance Criterion for quantitative comparison between two eigenvectors/modeshapes.
"""   
function MAC(v1::AbstractVector, v2::AbstractVector)
    return  (v1∘₁v2)^2 ./ ((v1∘₁v1)*(v2∘₁v2))
end

N      = 1000
K      = spdiagm(N,N,-1=>range(-N,-N,N-1),0=>range(2N,2N,N), 1=>range(-N,-N,N-1))
M      = spdiagm(N,N,0=>range(1/N,1/N,N))

Random.seed!(1234)
seed = randn(N)

neig   = 5
ω²,v,ncv = Muscade.geneig{:SDP}(K,M,neig;seed)

@testset "eigenmodes SDP" begin
    @test ncv ≥ neig
    @test sqrt.(ω²[1:neig]) ≈ [3.1384529113316875, 6.276898094305056, 9.41532782058609, 12.55373436187465, 15.692109989929111]
    @test MAC(v[1][1:200:end],      [  0.00014028558300245532,    0.026364134154732224,    0.042537225116976426,    0.04249391630968802,    0.02625071828168894]) ≈ 1.000 rtol=1e-6
    @test MAC(v[2][1:200:end],      [  0.00028056978420787495,    0.042580114937435326,    0.02613704384203099,   -0.026364134154727957,   -0.04249391630968351]) ≈ 1.000 rtol=1e-6
    @test maximum(abs.((K-ω²[1]*M)*v[1])./abs.(K*v[1])) < 1e-10
    @test maximum(abs.((K-ω²[2]*M)*v[2])./abs.(K*v[2])) < 1e-10
    @test maximum(abs.((K-ω²[3]*M)*v[3])./abs.(K*v[3])) < 1e-10
    @test maximum(abs.((K-ω²[4]*M)*v[4])./abs.(K*v[4])) < 1e-10
    @test maximum(abs.((K-ω²[5]*M)*v[5])./abs.(K*v[5])) < 2e-10
end

ω²,v,ncv = Muscade.geneig{:Hermitian}(K,M,neig;seed)
@testset "eigenmodes Hermitian" begin
    @test ncv ≥ neig
    @test sqrt.(ω²[1:neig]) ≈ [3.138452911330836, 6.276898094304366, 9.415327820585714, 12.55373436187439, 15.692109989929069]
    @test MAC(v[1][1:200:end],      [  0.0002811008347510544,    0.026372151256201664,    0.04254237814552391,    0.042489472779309846,    0.02624087646034281])        ≈ 1.000 rtol=1e-5
    @test MAC(v[2][1:200:end],      [ -0.0005640094745986227,    -0.04274190474190939,    -0.02628003327036983,     0.026212397939501447,     0.042340762998788375 ])   ≈ 1.000 rtol=1e-4
    @test maximum(abs.((K-ω²[1]*M)*v[1])./abs.(K*v[1])) < 1e-10
    @test maximum(abs.((K-ω²[2]*M)*v[2])./abs.(K*v[2])) < 1e-10
    @test maximum(abs.((K-ω²[3]*M)*v[3])./abs.(K*v[3])) < 1e-10
    @test maximum(abs.((K-ω²[4]*M)*v[4])./abs.(K*v[4])) < 1e-10
    @test maximum(abs.((K-ω²[5]*M)*v[5])./abs.(K*v[5])) < 2e-10
end

ω²,v,ncv = Muscade.geneig{:Complex}(K,M,neig;seed)
@testset "eigenmodes Unsymmetric" begin
    @test ncv ≥ neig
    @test sqrt.(real(ω²[1:neig])) ≈ [3.138452911330836, 6.276898094304366, 9.415327820585714, 12.55373436187439, 15.692109989929069]
    @test MAC(real.(v[1][1:200:end]),[ -0.0002805684107607904,    -0.026364133746437556,    -0.042537225451125094,    -0.04249391664172418,    -0.026250717868500813 ]) ≈ 1.000 rtol=1e-4
    @test MAC(real.(v[2][1:200:end]),[ -0.0005611175282438147,    -0.042580114600632754,    -0.026137046653016693,     0.026364136984402934,     0.042493915923130676 ])≈ 1.000 rtol=1e-4
    @test maximum(abs.((K-ω²[1]*M)*v[1])./abs.(K*v[1])) < 1e-10
    @test maximum(abs.((K-ω²[2]*M)*v[2])./abs.(K*v[2])) < 1e-10
    @test maximum(abs.((K-ω²[3]*M)*v[3])./abs.(K*v[3])) < 1e-10
    @test maximum(abs.((K-ω²[4]*M)*v[4])./abs.(K*v[4])) < 1e-10
    @test maximum(abs.((K-ω²[5]*M)*v[5])./abs.(K*v[5])) < 2e-10
end

A = sparse([1, 7, 37, 2, 6, 8, 12, 38, 3, 5, 9, 11, 39, 4, 10, 40, 3, 5, 9, 11, 2, 6, 8, 12, 1, 7, 13, 2, 6, 8, 14, 18, 3, 5, 9, 15, 17, 4, 10, 16, 3, 5, 11, 15, 17, 2, 6, 12, 14, 18, 7, 13, 19, 8, 12, 14, 20, 24, 9, 11, 15, 21, 23, 10, 16, 22, 9, 11, 17, 21, 23, 8, 12, 18, 20, 24, 13, 19, 25, 14, 18, 20, 26, 30, 15, 17, 21, 27, 29, 16, 22, 28, 15, 17, 23, 27, 29, 14, 18, 24, 26, 30, 19, 25, 31, 20, 24, 26, 32, 36, 21, 23, 27, 33, 35, 22, 28, 34, 21, 23, 29, 33, 35, 20, 24, 30, 32, 36, 25, 31, 41, 26, 30, 32, 36, 42, 27, 29, 33, 35, 43, 28, 34, 44, 27, 29, 33, 35, 26, 30, 32, 36, 1, 2, 3, 4, 31, 32, 33, 34], [1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 37, 38, 39, 40, 41, 42, 43, 44], [5000.0, -5000.0, -1.0, 1.4999999999999995e6, 149999.99999999997, -1.4999999999999995e6, 149999.99999999997, -1.0, 1499.9999999999993, -149.99999999999997, -1499.9999999999993, -149.99999999999994, -1.0, 5000.0, -5000.0, -1.0, -149.99999999999997, 19.999999999999996, 149.99999999999997, 9.999999999999996, 149999.99999999994, 19999.999999999996, -149999.99999999994, 9999.999999999996, -5000.0, 10000.0, -5000.0, -1.4999999999999995e6, -149999.99999999997, 2.999999999999999e6, -1.4999999999999995e6, 149999.99999999997, -1499.9999999999993, 149.99999999999997, 2999.9999999999986, -1499.9999999999993, -149.99999999999994, -5000.0, 10000.0, -5000.0, -149.99999999999994, 9.999999999999996, 40.0, 149.99999999999997, 9.999999999999996, 149999.99999999997, 9999.999999999996, 40000.0, -149999.99999999994, 9999.999999999996, -5000.0, 10000.0, -5000.0, -1.4999999999999995e6, -149999.99999999997, 3.000000000000001e6, -1.5000000000000012e6, 150000.00000000006, -1499.9999999999993, 149.99999999999997, 3000.0000000000005, -1500.0000000000011, -150.00000000000009, -5000.0, 10000.0, -5000.0, -149.99999999999994, 9.999999999999996, 40.00000000000001, 150.00000000000009, 10.000000000000004, 149999.99999999997, 9999.999999999996, 40000.0, -150000.00000000006, 10000.000000000004, -5000.0, 9999.999999999996, -4999.999999999997, -1.5000000000000012e6, -150000.00000000006, 2.9999999999999995e6, -1.4999999999999984e6, 149999.99999999988, -1500.0000000000011, 150.00000000000009, 2999.9999999999995, -1499.9999999999984, -149.9999999999999, -5000.0, 9999.999999999996, -4999.999999999997, -150.00000000000009, 10.000000000000004, 40.0, 149.9999999999999, 9.999999999999995, 150000.00000000006, 10000.000000000004, 39999.99999999999, -149999.99999999988, 9999.999999999995, -4999.999999999997, 9999.999999999996, -5000.0, -1.4999999999999984e6, -149999.99999999988, 2.9999999999999995e6, -1.5000000000000012e6, 150000.00000000006, -1499.9999999999984, 149.9999999999999, 2999.9999999999995, -1500.0000000000011, -150.00000000000009, -4999.999999999997, 9999.999999999996, -5000.0, -149.9999999999999, 9.999999999999995, 40.0, 150.00000000000009, 10.000000000000004, 149999.99999999988, 9999.999999999995, 39999.99999999999, -150000.00000000006, 10000.000000000004, -5000.0, 5000.0, -1.0, -1.5000000000000012e6, -150000.00000000006, 1.5000000000000012e6, -150000.00000000006, -1.0, -1500.0000000000011, 150.00000000000009, 1500.0000000000011, 150.00000000000009, -1.0, -5000.0, 5000.0, -1.0, -150.00000000000009, 10.000000000000004, 150.00000000000009, 20.000000000000007, 150000.00000000006, 10000.000000000004, -150000.00000000006, 20000.000000000004, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], 44, 44)
B = sparse([1, 7, 2, 6, 8, 12, 3, 5, 9, 11, 4, 10, 3, 5, 9, 11, 2, 6, 8, 12, 1, 7, 13, 2, 6, 8, 14, 18, 3, 5, 9, 15, 17, 4, 10, 16, 3, 5, 11, 15, 17, 2, 6, 12, 14, 18, 7, 13, 19, 8, 12, 14, 20, 24, 9, 11, 15, 21, 23, 10, 16, 22, 9, 11, 17, 21, 23, 8, 12, 18, 20, 24, 13, 19, 25, 14, 18, 20, 26, 30, 15, 17, 21, 27, 29, 16, 22, 28, 15, 17, 23, 27, 29, 14, 18, 24, 26, 30, 19, 25, 31, 20, 24, 26, 32, 36, 21, 23, 27, 33, 35, 22, 28, 34, 21, 23, 29, 33, 35, 20, 24, 30, 32, 36, 25, 31, 26, 30, 32, 36, 27, 29, 33, 35, 28, 34, 27, 29, 33, 35, 26, 30, 32, 36], [1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36], [0.06666666666666668, 0.03333333333333334, 0.0742857142857143, 0.0020952380952380958, 0.025714285714285707, -0.0012380952380952378, 0.0742857142857143, -0.0020952380952380958, 0.025714285714285707, 0.0012380952380952378, 0.05, 0.05, -0.0020952380952380958, 7.619047619047618e-5, -0.0012380952380952378, -5.714285714285713e-5, 0.0020952380952380958, 7.619047619047618e-5, 0.0012380952380952378, -5.714285714285713e-5, 0.03333333333333334, 0.13333333333333336, 0.03333333333333334, 0.025714285714285707, 0.0012380952380952378, 0.1485714285714286, 0.025714285714285707, -0.0012380952380952378, 0.025714285714285707, -0.0012380952380952378, 0.1485714285714286, 0.025714285714285707, 0.0012380952380952378, 0.05, 0.1, 0.05, 0.0012380952380952378, -5.714285714285713e-5, 0.00015238095238095237, -0.0012380952380952378, -5.714285714285713e-5, -0.0012380952380952378, -5.714285714285713e-5, 0.00015238095238095237, 0.0012380952380952378, -5.714285714285713e-5, 0.03333333333333334, 0.1333333333333333, 0.033333333333333326, 0.025714285714285707, 0.0012380952380952378, 0.1485714285714286, 0.0257142857142857, -0.0012380952380952374, 0.025714285714285707, -0.0012380952380952378, 0.1485714285714286, 0.0257142857142857, 0.0012380952380952374, 0.05, 0.1, 0.049999999999999996, 0.0012380952380952378, -5.714285714285713e-5, 0.0001523809523809523, -0.0012380952380952371, -5.714285714285708e-5, -0.0012380952380952378, -5.714285714285713e-5, 0.0001523809523809523, 0.0012380952380952371, -5.714285714285708e-5, 0.033333333333333326, 0.13333333333333336, 0.03333333333333335, 0.0257142857142857, 0.0012380952380952371, 0.14857142857142863, 0.02571428571428571, -0.0012380952380952387, 0.0257142857142857, -0.0012380952380952371, 0.14857142857142863, 0.02571428571428571, 0.0012380952380952387, 0.049999999999999996, 0.1, 0.05000000000000001, 0.0012380952380952374, -5.714285714285708e-5, 0.0001523809523809524, -0.0012380952380952384, -5.7142857142857176e-5, -0.0012380952380952374, -5.714285714285708e-5, 0.0001523809523809524, 0.0012380952380952384, -5.7142857142857176e-5, 0.03333333333333335, 0.13333333333333333, 0.033333333333333326, 0.02571428571428571, 0.0012380952380952384, 0.14857142857142863, 0.0257142857142857, -0.0012380952380952374, 0.02571428571428571, -0.0012380952380952384, 0.14857142857142863, 0.0257142857142857, 0.0012380952380952374, 0.05000000000000001, 0.1, 0.049999999999999996, 0.0012380952380952387, -5.7142857142857176e-5, 0.00015238095238095237, -0.0012380952380952371, -5.714285714285708e-5, -0.0012380952380952387, -5.7142857142857176e-5, 0.00015238095238095237, 0.0012380952380952371, -5.714285714285708e-5, 0.033333333333333326, 0.06666666666666665, 0.0257142857142857, 0.0012380952380952371, 0.07428571428571429, -0.0020952380952380945, 0.0257142857142857, -0.0012380952380952371, 0.07428571428571429, 0.0020952380952380945, 0.049999999999999996, 0.049999999999999996, 0.0012380952380952374, -5.714285714285708e-5, 0.0020952380952380945, 7.619047619047613e-5, -0.0012380952380952374, -5.714285714285708e-5, -0.0020952380952380945, 7.619047619047613e-5], 44, 44)
val, vec, info = Muscade.geneig{:Hermitian}(A,B,5) 
@testset "eigenmodes beams"  begin
    @test norm((A-val[2]*B)*vec[2]) < 1e-12
    @test eltype(val) == Float64
    @test eltype(vec[1]) == Float64
    @test val ≈ [97.42994261281041, 1563.7139171137453, 8015.953728852298, 10198.390060238187, 10557.280821412856]
end
end

