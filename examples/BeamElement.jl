include("Rotations.jl")

# # Euler beam element

using StaticArrays, LinearAlgebra, Muscade

# Data structure containing the cross section material properties
struct BeamCrossSection
    EA  :: ùï£  # axial stiffness 
    EI‚ÇÇ :: ùï£ # bending stiffness about second axis
    EI‚ÇÉ :: ùï£ # bending stiffness about third axis
    GJ  :: ùï£ # torsional stiffness (about longitudinal axis)
    Œº   :: ùï£ # mass per unit length
    Œπ‚ÇÅ  :: ùï£ # (mass) moment of inertia for rotation about the element longitudinal axis per unit length
end
BeamCrossSection(;EA=EA,EI‚ÇÇ=EI‚ÇÇ,EI‚ÇÉ=EI‚ÇÉ,GJ=GJ,Œº=Œº,Œπ‚ÇÅ=Œπ‚ÇÅ) = BeamCrossSection(EA,EI‚ÇÇ,EI‚ÇÉ,GJ,Œº,Œπ‚ÇÅ);

# Resultant function that computes the internal loads from the strains and curvatures, and external loads on the element. 
@espy function resultants(o::BeamCrossSection,Œµ,Œ∫,x·µß,r‚Çõ‚Çò,v·µ¢) 
    r‚ÇÄ  = ‚àÇ0(r‚Çõ‚Çò)  # orientation of the element's local refsys
    v·µ¢‚ÇÅ = ‚àÇ1(v·µ¢)  # intrinsic rotation rate         of the element's local refsys
    v·µ¢‚ÇÇ = ‚àÇ2(v·µ¢)  # intrinsic rotation acceleration of the element's local refsys
    x·µß‚ÇÄ,x·µß‚ÇÅ,x·µß‚ÇÇ = ‚àÇ0(x·µß),‚àÇ1(x·µß),‚àÇ2(x·µß)
    x‚Çó‚ÇÅ          = x·µß‚ÇÅ ‚àò‚ÇÅ r‚ÇÄ
    x‚Çó‚ÇÇ          = x·µß‚ÇÇ ‚àò‚ÇÅ r‚ÇÄ
    ## Compute drag force (example) and added-mass force (example)
    ## fa = œÅ * Ca .* x‚Çó‚ÇÇ
    ## fd = .5 * œÅ * A .* Cd .* x‚Çó‚ÇÅ #.* abs.(x‚Çó‚ÇÅ)
    ## Compute translational inertia force 
    fi = o.Œº * x·µß‚ÇÇ 
    ‚òºf‚Çë = fi # external forces at Gauss point.
    ## Compute roll inertia moment 
    m‚ÇÅ‚Çó = o.Œπ‚ÇÅ*v·µ¢‚ÇÇ[1] #local 
    m·µß = ‚àÇ0(r‚Çõ‚Çò)[:,1] * m‚ÇÅ‚Çó #global
    ‚òºm‚Çë = m·µß  # external couples at Gauss point. 
    ## Compute internal loads
    ‚òºf·µ¢ = o.EA*‚àÇ0(Œµ)
    ## WARNING: curvatures are defined as rate of rotation along the element, not second derivatives of deflection.  
    ## Hence Œ∫[3]>0 implies +2 direction is inside curve, 
    ##       Œ∫[2]>0 implies -3 direction is inside curve.
    ‚òºm·µ¢  = SVector(o.GJ*‚àÇ0(Œ∫)[1],o.EI‚ÇÉ*‚àÇ0(Œ∫)[2],o.EI‚ÇÇ*‚àÇ0(Œ∫)[3])
    return f·µ¢,m·µ¢,f‚Çë,m‚Çë
end;

## Static Euler beam element, with two nodes, two Gauss points and 12 degrees of freedom. 
const ngp        = 4
const ndim       = 3
const nXdof      = 12
const nUdof      = 3
const nXnod      = 2;

# Shape functions for a beam element with support Œ∂‚àà[-1/2,1/2]. Though the shape function matrices are sparse, do not "unroll" them.  That would be applyer but considerably clutter the code                          
y‚Çê(Œ∂) =            2Œ∂       # differential axial displacement or roll field
y·µ§(Œ∂) =  -4Œ∂^3    +3Œ∂       # deflection due to differential nodal transverse translation
y·µ•(Œ∂) =        Œ∂^2   - 1/4  # deflection due to differenttial rotation (bending, not torsion)
Œ∫‚Çê(Œ∂) =                2    # torsion  . Œ∫‚Çê = y‚Çê‚Ä≤ . Divide by L .    
Œ∫·µ§(Œ∂) =  -24Œ∂               # curvature. Œ∫·µ§ = y·µ§‚Ä≤‚Ä≤. Divide by L¬≤.
Œ∫·µ•(Œ∂) =                2;   # curvature. Œ∫·µ• = y·µ•‚Ä≤‚Ä≤. Divide by L .

# Data structure describing an EulerBeam3D element as meshed
struct EulerBeam3D{Mat,Uforce} <: AbstractElement
    c‚Çò       :: SVector{3,ùï£}     # Position of the middle of the element, as meshed
    r‚Çò       :: Mat33{ùï£}         # Orientation of the element, as meshed, represented by a rotation matrix (from global to local)
    Œ∂gp      :: SVector{ngp,ùï£}   # Location of the Gauss points for the normalized element with length 1
    Œ∂nod     :: SVector{nXnod,ùï£} # Location of the nodes for the normalized element with length 1
    tg‚Çò      :: SVector{ndim,ùï£}  # Vector connecting the nodes of the element in the global coordinate system
    tg‚Çë      :: SVector{ndim,ùï£}  # Vector connecting the nodes of the element in the local coordinate system
    y‚Çê       :: SVector{ngp,ùï£}   # Value at gp of shape function for differential axial displacement or roll field
    y·µ§       :: SVector{ngp,ùï£}   # Value at gp of shape function for deflection due to differential nodal transverse translation
    y·µ•       :: SVector{ngp,ùï£}   # Value at gp of shape function for deflection due to differenttial rotation (bending, not torsion)
    Œ∫‚Çê       :: SVector{ngp,ùï£}   # Value at gp of shape function for torsion  . Œ∫‚Çê = y‚Çê‚Ä≤ . Divided by L .    
    Œ∫·µ§       :: SVector{ngp,ùï£}   # Value at gp of shape function for curvature. Œ∫·µ§ = y·µ§‚Ä≤‚Ä≤. Divided by L¬≤.
    Œ∫·µ•       :: SVector{ngp,ùï£}   # Value at gp of shape function for curvature. Œ∫·µ• = y·µ•‚Ä≤‚Ä≤. Divided by L .
    L        :: ùï£                # as meshed length of the element
    dL       :: SVector{ngp,ùï£}   # length associated to each Gauss point
    mat      :: Mat              # used to store material properties (BeamCrossSection, for example)
end;

# For performance, `residual` will only accept differentiation to first order
Muscade.nosecondorder(::Type{<:EulerBeam3D}) = Val(true)

# Define nodes, classes, and field names of dofs
Muscade.doflist(     ::Type{EulerBeam3D{Mat,false}}) where{Mat} = 
        (inod = (1,1,1,1,1,1, 2,2,2,2,2,2), 
         class= ntuple(i->:X,nXdof), 
         field= (:t1,:t2,:t3,:r1,:r2,:r3, :t1,:t2,:t3,:r1,:r2,:r3) )
Muscade.doflist(     ::Type{EulerBeam3D{Mat,true}}) where{Mat} = 
        (inod = (1,1,1,1,1,1, 2,2,2,2,2,2, 3,3,3), 
         class= (ntuple(i->:X,nXdof)...,ntuple(i->:U,nUdof)...), 
         field= (:t1,:t2,:t3,:r1,:r2,:r3, :t1,:t2,:t3,:r1,:r2,:r3,  :t1,:t2,:t3) )
# ElementType for the EulerBeam3D element. Arguments: node list, material, and direction of the first bending axis in the global coordinate system.  
EulerBeam3D(nod;kwargs...) = EulerBeam3D{false}(nod;kwargs...) # by default, EulerBeam3D does not have Udof.
function EulerBeam3D{Udof}(nod::Vector{Node};mat,orient2::SVector{ndim,ùï£}=SVector(0.,1.,0.)) where {Udof}
    c       = coord(nod)
    ## Position of the middle of the element in the global coordinate system (as-meshed)
    c‚Çò      = SVector{ndim}((c[1]+c[2])/2)
    ## Length and tangential vector to the element in the global coordinate system  
    tg‚Çò     = SVector{ndim}( c[2]-c[1]   )
    L       = norm(tg‚Çò)
    t       = tg‚Çò/L
    ## Create t, n, b which are the longitudinal and two transverse unit vectors to the element (as-meshed). 
    ## NB: orient2, provided by the user, will define the first bending axis. 
    orient2/= norm(orient2)
    n       = orient2 - t*dot(orient2,t) 
    nn      = norm(n) 
    nn>1e-3 || muscadeerror("Provide a 'orient' input that is not nearly parallel to the element")
    n      /= nn
    b       = cross(t,n)
    r‚Çò      = SMatrix{ndim,ndim}(t...,n...,b...)
    ## Tangential vector and node coordinates in the local coordinate system
    tg‚Çë     = SVector{ndim}(L,0,0)
    ## Weight associated to each Gauss point
    dL    = SVector{ngp}(L/2*(18-sqrt(30))/36,L/2*(18+sqrt(30))/36  ,L/2*(18+sqrt(30))/36,L/2*(18-sqrt(30))/36  ) 
    ## Location Œ∂gp of the Gauss points for a unit-length beam element, with nodes at Œ∂nod=¬±1/2. 
    Œ∂gp     = SVector{ngp  }(-1/2*sqrt(3/7+2/7*sqrt(6/5)),-1/2*sqrt(3/7-2/7*sqrt(6/5)), +1/2*sqrt(3/7-2/7*sqrt(6/5)),+1/2*sqrt(3/7+2/7*sqrt(6/5))) 
    Œ∂nod    = SVector{nXnod}(-1/2  ,1/2  )
    shapes  = (y‚Çê.(Œ∂gp), y·µ§.(Œ∂gp), y·µ•.(Œ∂gp)*L, Œ∫‚Çê.(Œ∂gp)/L, Œ∫·µ§.(Œ∂gp)/L^2, Œ∫·µ•.(Œ∂gp)/L)
    return EulerBeam3D{typeof(mat),Udof}(c‚Çò,r‚Çò,Œ∂gp,Œ∂nod,tg‚Çò,tg‚Çë,shapes...,L,dL,mat)
end;

# Define now the residual function for the EulerBeam3D element.
@espy function Muscade.residual(o::EulerBeam3D{Mat,Udof},   X,U,A,t,SP,dbg) where{Mat,Udof}
    P,ND                = constants(X),length(X)
    ## Compute all quantities at Gauss point, their time derivatives, including intrinsic roll rate and acceleration
    gp_,Œµ_,v‚Çõ‚Çò_,r‚Çõ‚Çò_,v‚Çó‚ÇÇ_,_,_ = kinematics{:direct}(o,motion{P}(X))
#    gp_,Œµ_,v‚Çõ‚Çò_,r‚Çõ‚Çò_,v‚Çó‚ÇÇ_,_,_ = kinematics(o,motion{P}(X),(f,x)->f(x))
    gpval,‚òºŒµ , r‚Çõ‚Çò       = motion‚Åª¬π{P,ND}(gp_,Œµ_,r‚Çõ‚Çò_  ) 
    v·µ¢                  = intrinsicrotationrates(r‚Çõ‚Çò)
    ## compute all Jacobians of the above quantities with respect to X‚ÇÄ
    X‚ÇÄ                  = ‚àÇ0(X)
    TX‚ÇÄ                 = revariate{1}(X‚ÇÄ)  # check type
    Tgp,TŒµ,Tv‚Çõ‚Çò,_,_,_,_  = kinematics{:compose}(o,TX‚ÇÄ) # the crux
    gp‚àÇX‚ÇÄ,Œµ‚àÇX‚ÇÄ,v‚Çõ‚Çò‚àÇX‚ÇÄ    = composeJacobian{P}((Tgp,TŒµ,Tv‚Çõ‚Çò),X‚ÇÄ)
    ## Quadrature loop: compute resultants
    gp                  = ntuple(ngp) do igp
        ‚òºx,‚òºŒ∫           = gpval[igp].x, gpval[igp].Œ∫   
        x‚àÇX‚ÇÄ,Œ∫‚àÇX‚ÇÄ       = gp‚àÇX‚ÇÄ[igp].x, gp‚àÇX‚ÇÄ[igp].Œ∫
        f·µ¢,m·µ¢,f‚Çë,m‚Çë     = ‚òºresultants(o.mat,Œµ,Œ∫,x,r‚Çõ‚Çò,v·µ¢)          # call the "resultant" function to compute loads (local coordinates) from strains/curvatures/etc. using material properties. Note that output is dual of input. 
        f‚Çë              = Udof ? f‚Çë-‚àÇ0(U) : f‚Çë                    # U is per unit length
        R_               = (f·µ¢ ‚àò‚ÇÄ Œµ‚àÇX‚ÇÄ + m·µ¢ ‚àò‚ÇÅ Œ∫‚àÇX‚ÇÄ + f‚Çë ‚àò‚ÇÅ x‚àÇX‚ÇÄ + m‚Çë ‚àò‚ÇÅ v‚Çõ‚Çò‚àÇX‚ÇÄ) * o.dL[igp]     # Contribution to the local nodal load of this Gauss point  [nXdof] = scalar*[nXdof] + [ndim]‚ãÖ[ndim,nXdof] + [ndim]‚ãÖ[ndim,nXdof]
        @named(R_)
    end
    R                   = sum(gp·µ¢.R_ for gp·µ¢‚ààgp) 
    ‚ô¢Œ∫                  = motion‚Åª¬π{P,ND}(SVector(v‚Çó‚ÇÇ_[1],v‚Çó‚ÇÇ_[3],-v‚Çó‚ÇÇ_[2])).*(2/o.L) 
    ‚ô¢r‚Çõ‚Çò                 = motion‚Åª¬π{P,ND}(r‚Çõ‚Çò_)
    return R,noFB  
end;
struct kinematics{Mode} end
function kinematics{Mode}(o::EulerBeam3D,X‚ÇÄ)  where{Mode}
    c‚Çò,r‚Çò,tg‚Çò,tg‚Çë,Œ∂nod,Œ∂gp,L  = o.c‚Çò,o.r‚Çò,o.tg‚Çò,o.tg‚Çë,o.Œ∂nod,o.Œ∂gp,o.L   # As-meshed element coordinates and describing tangential vector
    v‚Çõ‚Çò,r‚Çõ‚Çò,u‚Çó‚ÇÇ,v‚Çó‚ÇÇ,c‚Çõ‚Çò  = corotated{Mode}(o,X‚ÇÄ)
    Œµ                = ‚àö((u‚Çó‚ÇÇ[1]+L/2)^2+u‚Çó‚ÇÇ[2]^2+u‚Çó‚ÇÇ[3]^2)*2/L - 1.      
    gp               = ntuple(ngp) do igp  # gp[igp].Œ∫, gp[igp].x
        y‚Çê,y·µ§,y·µ•,Œ∫‚Çê,Œ∫·µ§,Œ∫·µ• = o.y‚Çê[igp],o.y·µ§[igp],o.y·µ•[igp],o.Œ∫‚Çê[igp],o.Œ∫·µ§[igp],o.Œ∫·µ•[igp]
        Œ∫            = SVector(         Œ∫‚Çê*v‚Çó‚ÇÇ[1], Œ∫·µ§*u‚Çó‚ÇÇ[2]+Œ∫·µ•*v‚Çó‚ÇÇ[3], Œ∫·µ§*u‚Çó‚ÇÇ[3]-Œ∫·µ•*v‚Çó‚ÇÇ[2])  
        y            = SVector(y‚Çê*u‚Çó‚ÇÇ[1]         , y·µ§*u‚Çó‚ÇÇ[2]+y·µ•*v‚Çó‚ÇÇ[3], y·µ§*u‚Çó‚ÇÇ[3]-y·µ•*v‚Çó‚ÇÇ[2])  
        x            = r‚Çõ‚Çò‚àò‚ÇÅ(tg‚Çë*Œ∂gp[igp]+y)+c‚Çõ‚Çò 
        (Œ∫=Œ∫,x=x)  
    end
    return gp,Œµ,v‚Çõ‚Çò,r‚Çõ‚Çò,v‚Çó‚ÇÇ,u‚Çó‚ÇÇ,c‚Çõ‚Çò
end

vec3(v,ind) = SVector{3}(v[i] for i‚ààind);
struct corotated{Mode} end 
function corotated{Mode}(o::EulerBeam3D,X‚ÇÄ)  where{Mode}
    c‚Çò,r‚Çò,tg‚Çò,tg‚Çë,Œ∂nod,Œ∂gp,L  = o.c‚Çò,o.r‚Çò,o.tg‚Çò,o.tg‚Çë,o.Œ∂nod,o.Œ∂gp,o.L   # As-meshed element coordinates and describing tangential vector
    u·µß‚ÇÅ,u·µß‚ÇÇ,v·µß             = vec3(X‚ÇÄ,1:3), vec3(X‚ÇÄ,7:9), SVector(X‚ÇÄ[4],X‚ÇÄ[5],X‚ÇÄ[6],X‚ÇÄ[10],X‚ÇÄ[11],X‚ÇÄ[12])
    Œîv·µß,r‚Çõ‚Çò,v‚Çõ‚Çò             = apply{Mode}(v·µß) do v
        v·µß‚ÇÅ,v·µß‚ÇÇ            = vec3(v,1:3), vec3(v,4:6)
        r‚Çõ‚ÇÅ                = apply{Mode}(Rodrigues,v·µß‚ÇÅ)
        r‚Çõ‚ÇÇ                = apply{Mode}(Rodrigues,v·µß‚ÇÇ)
        Œîv·µß_         = 0.5*Rodrigues‚Åª¬π(r‚Çõ‚ÇÇ ‚àò‚ÇÅ r‚Çõ‚ÇÅ')
        r‚Çõ‚Çò_          = apply{Mode}(Rodrigues,Œîv·µß_) ‚àò‚ÇÅ r‚Çõ‚ÇÅ ‚àò‚ÇÅ o.r‚Çò  
        v‚Çõ‚Çò_          = Rodrigues‚Åª¬π(r‚Çõ‚Çò_)              
        return Œîv·µß_,r‚Çõ‚Çò_,v‚Çõ‚Çò_
    end   
    c‚Çõ               = 0.5*(u·µß‚ÇÅ+u·µß‚ÇÇ)
    u‚Çó‚ÇÇ              = r‚Çõ‚Çò' ‚àò‚ÇÅ (u·µß‚ÇÇ+tg‚Çò*Œ∂nod[2]-c‚Çõ)-tg‚Çë*Œ∂nod[2]    #Local displacement of node 2
    v‚Çó‚ÇÇ              = r‚Çõ‚Çò' ‚àò‚ÇÅ Œîv·µß
    return v‚Çõ‚Çò,r‚Çõ‚Çò,u‚Çó‚ÇÇ,v‚Çó‚ÇÇ,c‚Çõ+c‚Çò
end;

#Assumes that BeamElement.jl has been included previously, and that "using GLMakie" has been invoked
using GLMakie
"""

Drawing a `EulerBeam3D`.

    draw!(axis,state)

    draw!(axis,state;EulerBeam3D=(;style=:shape))

    Œ±      = 2œÄ*(0:19)/20
    circle = 0.1*[cos.(Œ±) sin.(Œ±)]'
    draw!(axis,state;EulerBeam3D=(;style=:solid,section = circle))

`style=:shape` shows the deformed neutral axis of the element. It has optional arguments `frame=true` 
(draws the element's corotated frame of reference)
and `nseg=10` (number of points to show the deflected shape of each element). 

`style=:solid` shows the deformed shape of the element. It requires the input `section=...` to be given
a matrix of size `(2,nsec)` describing `nsec` points around the cross section of the element (no need to close 
the circumference by repeating the first point at the end).  It has optional arguments `nseg=10` as above, `marking=true`
to draw a longitudinal marking and `solid_color=:yellow`.
 
Other optional arguments (and their default values) are
- `Udof` (`true` iff element has Udofs) wether to draw U-forces.
- `draw_frame = false` wether to draw the local reference frame of each element
- `draw_marking = true` wether to draw "longitudinal marking" along the element.  Will only draw if style=:solid.
- `nseg = 1` number of segments to display the shape of a deformed element
- `solid_color = :yellow` color of the surface if `style=:solid`
- `line_color = :black` color of the line if `style=:sshape`
- `Uscale = 1.` How many meter is a Newton per meter?
"""
function Muscade.allocate_drawing(axis,o::AbstractVector{EulerBeam3D{Tmat,Udof}};kwargs...) where{Tmat,Udof}
    args                 = default{:EulerBeam3D     }(kwargs,(;)     )  
    section              = default{:section         }(args,zeros(2,0))  
    nsec                 = size(section,2)                            
    opt = (default(args,(style=:shape,draw_frame=false,draw_marking=true,nseg=1,
                  solid_color=:yellow,line_color=:black,Uscale=1.,Udof=Udof))...,
            nel          = length(o)                                  ,
            nsec         = nsec                                       ,                    
            section      = section                                    ,
            markrad      = nsec==0 ? 0. : 1.01*maximum(section[1,:])      
        )
    opt.style==:solid && nsec<2 && muscadeerror("An section description must be provided for 'solid' plot")
    nel_shape         = opt.style==:shape ? opt.nel   : 0
    nel_shape_frame   = opt.draw_frame    ? nel_shape : 0
    nel_solid         = opt.style==:solid ? opt.nel   : 0 
    nel_solid_marking = opt.draw_marking  ? nel_solid : 0
    nel_udof          = opt.Udof          ? opt.nel   : 0

    mut=(
            node         = ùï£2(undef,3,3*opt.nel)                        ,
            shape_x      = ùï£2(undef,3,(opt.nseg+2)*nel_shape)           ,   
            shape_frame  = ùï£2(undef,3,3*3*nel_shape_frame)              , # idim, point-point-lift, ivec, iel
            solid_vertex = ùï£2(undef,3,opt.nsec*(opt.nseg+1)*nel_solid)  , 
            solid_face   = ùï´2(undef,2*opt.nsec* opt.nseg   *nel_solid,3),
            solid_mark   = ùï£2(undef,3,(opt.nseg+2)*nel_solid_marking)   ,     
            ucrest       = ùï£2(undef,3,5*nel_udof)                       , # idim, 6point-lift,iel
        )   
    return mut,opt
end

function Muscade.update_drawing(axis,o::AbstractVector{EulerBeam3D{Tmat,Udof}},oldmut,opt, Œõ,X,U,A,t,SP,dbg) where{Tmat,Udof} 
    mut               = oldmut 
    X‚ÇÄ                = ‚àÇ0(X)
    U‚ÇÄ                = ‚àÇ0(U)
    it1,ir1,it2,ir2   = SVector{3}(1:3),SVector{3}(4:6),SVector{3}(7:9),SVector{3}(10:12)
    nsec              = size(opt.section,2) 
    node = reshape(mut.node,(3,3,opt.nel))
    for (iel,o·µ¢) = enumerate(o)
        node[:,1,iel] = o·µ¢.c‚Çò - o·µ¢.tg‚Çò/2 + X‚ÇÄ[it1,iel]
        node[:,2,iel] = o·µ¢.c‚Çò + o·µ¢.tg‚Çò/2 + X‚ÇÄ[it2,iel]
        node[:,3,iel].= NaN  
    end

    if opt.style==:shape
        Œ∂ = range(-1/2,1/2,opt.nseg+1)
        if opt.draw_frame shape_frame  = reshape(mut.shape_frame ,(3,3,3       ,opt.nel)) end
        if opt.Udof       ucrest       = reshape(mut.ucrest,      (3,5         ,opt.nel)) end
        shape_x                        = reshape(mut.shape_x     ,(3,opt.nseg+2,opt.nel))
        for (iel,o·µ¢) = enumerate(o)
            c‚Çò,r‚Çò,tg‚Çò,tg‚Çë,Œ∂nod,Œ∂gp,L  = o·µ¢.c‚Çò,o·µ¢.r‚Çò,o·µ¢.tg‚Çò,o·µ¢.tg‚Çë,o·µ¢.Œ∂nod,o·µ¢.Œ∂gp,o·µ¢.L   
            X‚ÇÄ‚Çë = view(X‚ÇÄ,:,iel)
            v‚Çõ‚Çò,r‚Çõ‚Çò,u‚Çó‚ÇÇ,v‚Çó‚ÇÇ,c‚Çõ‚Çò = corotated{:direct}(o·µ¢,X‚ÇÄ‚Çë) 
            if opt.draw_frame
                for ivec = 1:3
                    shape_frame[:,1,ivec,iel] = c‚Çõ‚Çò
                    shape_frame[:,2,ivec,iel] = c‚Çõ‚Çò + o·µ¢.L/3*r‚Çõ‚Çò[:,ivec]
                    shape_frame[:,3,ivec,iel].= NaN
                end
            end
            if opt.Udof
                ucrest[:,1,iel] = node[:,1,iel]
                ucrest[:,2,iel] = node[:,1,iel] + r‚Çõ‚Çò ‚àò‚ÇÅ view(U‚ÇÄ,:,iel) * opt.Uscale
                ucrest[:,3,iel] = node[:,2,iel] + r‚Çõ‚Çò ‚àò‚ÇÅ view(U‚ÇÄ,:,iel) * opt.Uscale
                ucrest[:,4,iel] = node[:,2,iel]
                ucrest[:,5,iel].= NaN
            end
            for (i,Œ∂·µ¢) ‚àà enumerate(Œ∂)
                y          = SVector(y‚Çê(Œ∂·µ¢)*u‚Çó‚ÇÇ[1] , y·µ§(Œ∂·µ¢)*u‚Çó‚ÇÇ[2]+L*y·µ•(Œ∂·µ¢)*v‚Çó‚ÇÇ[3], y·µ§(Œ∂·µ¢)*u‚Çó‚ÇÇ[3]-L*y·µ•(Œ∂·µ¢)*v‚Çó‚ÇÇ[2])  
                shape_x[:,i         ,iel] = r‚Çõ‚Çò‚àò‚ÇÅ(tg‚Çë*Œ∂·µ¢+y)+c‚Çõ‚Çò 
                shape_x[:,opt.nseg+2,iel].= NaN
            end        
        end
    elseif opt.style==:solid
        Œ∂ = range(-1/2,1/2,opt.nseg+1)
        idx(iel,iseg,isec) = mod_onebased(isec,opt.nsec)+opt.nsec*(iseg-1+(opt.nseg+1)*(iel-1)) # 1st index into rvertex
        if opt.Udof         ucrest         = reshape(mut.ucrest       ,(3,5          ,opt.nel)) end
        if opt.draw_marking solid_mark     = reshape(mut.solid_mark  ,(3,opt.nseg+2 ,opt.nel)) end
        solid_face                         = reshape(mut.solid_face  ,(2,opt.nsec, opt.nseg   ,opt.nel,3))
        solid_vertex                       = reshape(mut.solid_vertex,(3,opt.nsec, opt.nseg+1 ,opt.nel))
        for (iel,o·µ¢) = enumerate(o)
            c‚Çò,r‚Çò,tg‚Çò,tg‚Çë,Œ∂nod,Œ∂gp,L  = o·µ¢.c‚Çò,o·µ¢.r‚Çò,o·µ¢.tg‚Çò,o·µ¢.tg‚Çë,o·µ¢.Œ∂nod,o·µ¢.Œ∂gp,o·µ¢.L   
            X‚ÇÄ‚Çë = view(X‚ÇÄ,:,iel)
            v‚Çõ‚Çò,r‚Çõ‚Çò,u‚Çó‚ÇÇ,v‚Çó‚ÇÇ,c‚Çõ‚Çò = corotated{:direct}(o·µ¢,X‚ÇÄ‚Çë) 
            v·µß‚ÇÅ,v·µß‚ÇÇ          = vec3(X‚ÇÄ‚Çë,4:6), vec3(X‚ÇÄ‚Çë,10:12)
            r‚Çõ‚ÇÅ              = Rodrigues(v·µß‚ÇÅ)
            r‚Çõ‚ÇÇ              = Rodrigues(v·µß‚ÇÇ)
            if opt.Udof
                ucrest[:,1,iel] = node[:,1,iel]
                ucrest[:,2,iel] = node[:,1,iel] + r‚Çõ‚Çò ‚àò‚ÇÅ view(U‚ÇÄ,:,iel) * opt.Uscale
                ucrest[:,3,iel] = node[:,2,iel] + r‚Çõ‚Çò ‚àò‚ÇÅ view(U‚ÇÄ,:,iel) * opt.Uscale
                ucrest[:,4,iel] = node[:,2,iel]
                ucrest[:,5,iel].= NaN
            end
            Œîv = Rodrigues‚Åª¬π(r‚Çõ‚ÇÇ ‚àò‚ÇÅ r‚Çõ‚ÇÅ')/opt.nseg
            for (iseg,Œ∂·µ¢) ‚àà enumerate(Œ∂) # actualy iterating over nseg+1 segment boundaries
                y  = SVector(y‚Çê(Œ∂·µ¢)*u‚Çó‚ÇÇ[1] , y·µ§(Œ∂·µ¢)*u‚Çó‚ÇÇ[2]+L*y·µ•(Œ∂·µ¢)*v‚Çó‚ÇÇ[3], y·µ§(Œ∂·µ¢)*u‚Çó‚ÇÇ[3]-L*y·µ•(Œ∂·µ¢)*v‚Çó‚ÇÇ[2])  # interpolate
                xn = r‚Çõ‚Çò‚àò‚ÇÅ(tg‚Çë*Œ∂·µ¢+y)+c‚Çõ‚Çò # point on neutral axis
                r  = Rodrigues((iseg-1)*Œîv) ‚àò‚ÇÅ r‚Çõ‚ÇÅ ‚àò‚ÇÅ r‚Çò  
                if opt.draw_marking 
                    solid_mark[:,    iseg  ,iel] = xn .+ r[:,2]*opt.markrad 
                    solid_mark[:,opt.nseg+2,iel].= NaN 
                end
                for isec = 1:opt.nsec
                    solid_vertex[:,isec,iseg,iel] = xn .+ r[:,2]*opt.section[1,isec] + r[:,3]*opt.section[2,isec] 
                    if iseg‚â§opt.nseg
                        i1,i2,i3,i4 = idx(iel,iseg,isec),idx(iel,iseg  ,isec+1),idx(iel,iseg+1,isec  ),idx(iel,iseg+1,isec+1)
                        solid_face[1,isec,iseg,iel,:] = SVector(i1,i2,i4)    
                        solid_face[2,isec,iseg,iel,:] = SVector(i1,i4,i3)   
                    end
                end
            end  
        end
    end
    return mut
end

function Muscade.display_drawing!(axis,::Type{EulerBeam3D{Tmat,Udof}},obs,opt) where{Tmat,Udof}
    scatter!(                                          axis, obs.node                         ,color = opt.line_color , marker=:circle,markersize=3)  
    opt.style==:shape  &&                     lines!(  axis, obs.shape_x                      ,color = opt.line_color ,linewidth=.5                )
    opt.style==:shape  && opt.draw_frame   && lines!(  axis, obs.shape_frame                  ,color = :grey          ,linewidth=.5                )    
    opt.style==:solid  &&                     mesh!(   axis, obs.solid_vertex, obs.solid_face ,color = opt.solid_color                             )  
    opt.style==:solid  && opt.draw_marking && lines!(  axis, obs.solid_mark                   ,color = opt.line_color                              )    
    opt.Udof           &&                     lines!(  axis, obs.ucrest                       ,color = :red           ,linewidth=.5                )    
end



