include("Rotations.jl")

# # Euler beam element

using StaticArrays, LinearAlgebra, Muscade

# Data structure containing the cross section material properties
struct BeamCrossSection
    EA :: ùï£
    EI :: ùï£
    GJ :: ùï£
    ## œÅ  :: ùï£ 
    ## Œº  :: ùï£ 
    ## Add moment of inertia about x for dynamic torque
    ## Cd :: SVector{3,ùï£}
    ## Ca :: SVector{3,ùï£}
    ## A  :: SVector{3,ùï£}
end
BeamCrossSection(;EA=EA,EI=EI,GJ=GJ) = BeamCrossSection(EA,EI,GJ);

# Resultant function that computes the internal loads from the strains and curvatures, and external loads on the element. 
@espy function resultants(o::BeamCrossSection,Œµ,Œ∫,x·µß,r‚Çõ‚Çò,v·µ¢) 

    r‚ÇÄ  = ‚àÇ0(r‚Çõ‚Çò)  # orientation of the element's local refsys
    v·µ¢‚ÇÅ = ‚àÇ1(v·µ¢)  # intrinsic rotation rate         of the element's local refsys
    v·µ¢‚ÇÇ = ‚àÇ2(v·µ¢)  # intrinsic rotation acceleration of the element's local refsys
    ‚òºm‚Çë = SVector(0.,0.,0.) # external couples at Gauss point. m‚Çë is in local coordinates 


    x·µß‚ÇÄ,x·µß‚ÇÅ,x·µß‚ÇÇ = ‚àÇ0(x·µß),‚àÇ1(x·µß),‚àÇ2(x·µß)
    x‚Çó‚ÇÅ          = x·µß‚ÇÅ ‚àò‚ÇÅ r‚ÇÄ
    x‚Çó‚ÇÇ          = x·µß‚ÇÇ ‚àò‚ÇÅ r‚ÇÄ
    ## Compute drag force (hard-coded parameters so far)
    # œÅ = 1025.0
    # A  = SVector(0.0,1.0,1.0)
    # Cd = SVector(0.0,1.0,1.0) # SVector(0.0,0.0,0.0)
    # fd = .5 * œÅ * A .* Cd .* x‚Çó‚ÇÅ #.* abs.(x‚Çó‚ÇÅ) #mind the sign: forces exerted by element on its environment
    # ## Compute inertia force (hard-coded parameter so far)
    Œº   = (1.0,1.0,1.0)
    fi = Œº .* x‚Çó‚ÇÇ 
    ## Compute added mass force (hard-coded parameter so far)
    # Ca = SVector(0.0,0.0,0.0)
    # fa = œÅ * Ca .* x‚Çó‚ÇÇ
    
    # ‚òºf‚Çë = fd+fa+
    ‚òºf‚Çë = fi #SVector(0.,0.,0.) # external forces at Gauss point (no external moment/torque/... so far). f‚Çë is in local coordinates 
    ‚òºf·µ¢ = o.EA*‚àÇ0(Œµ)

    ## WARNING: curvatures are defined as rate of rotation along the element, not second derivatives of deflection.  
    ## Hence Œ∫[3]>0 implies +2 direction is inside curve, 
    ##       Œ∫[2]>0 implies -3 direction is inside curve.
    ‚òºm·µ¢  = SVector(o.GJ*‚àÇ0(Œ∫)[1],o.EI*‚àÇ0(Œ∫)[2],o.EI*‚àÇ0(Œ∫)[3])# replace by Œ∫‚ÇÄ 
    return f·µ¢,m·µ¢,f‚Çë,m‚Çë
end;

## Static Euler beam element, with two nodes, two Gauss points and 12 degrees of freedom. 
const ngp        = 4
const ndim       = 3
const ndof       = 12
const nnod       = 2;

# Shape functions for a beam element with support Œ∂‚àà[-1/2,1/2]. Though the shape function matrices are sparse, do not "unroll" them.  That would be faster but considerably clutter the code                          
y‚Çê(Œ∂) =            2Œ∂       # differential axial displacement or roll field
y·µ§(Œ∂) =  -4Œ∂^3    +3Œ∂       # deflection due to differential nodal transverse translation
y·µ•(Œ∂) =        Œ∂^2   - 1/4  # deflection due to differenttial rotation (bending, not torsion)
Œ∫‚Çê(Œ∂) =                2    # torsion  . Œ∫‚Çê = y‚Çê‚Ä≤ . Divide by L .    
Œ∫·µ§(Œ∂) =  -24Œ∂               # curvature. Œ∫·µ§ = y·µ§‚Ä≤‚Ä≤. Divide by L¬≤.
Œ∫·µ•(Œ∂) =                2;   # curvature. Œ∫·µ• = y·µ•‚Ä≤‚Ä≤. Divide by L .

# Data structure describing an EulerBeam3D element as meshed
struct EulerBeam3D{Mat} <: AbstractElement
    c‚Çò       :: SVector{3,ùï£}    # Position of the middle of the element, as meshed
    r‚Çò       :: Mat33{ùï£}        # Orientation of the element, as meshed, represented by a rotation matrix (from global to local)
    Œ∂gp      :: SVector{ngp,ùï£}  # Location of the Gauss points for the normalized element with length 1
    Œ∂nod     :: SVector{nnod,ùï£} # Location of the nodes for the normalized element with length 1
    tg‚Çò      :: SVector{ndim,ùï£} # Vector connecting the nodes of the element in the global coordinate system
    tg‚Çë      :: SVector{ndim,ùï£} # Vector connecting the nodes of the element in the local coordinate system
    y‚Çê       :: SVector{ngp,ùï£}  # Value at gp of shape function for differential axial displacement or roll field
    y·µ§       :: SVector{ngp,ùï£}  # Value at gp of shape function for deflection due to differential nodal transverse translation
    y·µ•       :: SVector{ngp,ùï£}  # Value at gp of shape function for deflection due to differenttial rotation (bending, not torsion)
    Œ∫‚Çê       :: SVector{ngp,ùï£}  # Value at gp of shape function for torsion  . Œ∫‚Çê = y‚Çê‚Ä≤ . Divided by L .    
    Œ∫·µ§       :: SVector{ngp,ùï£}  # Value at gp of shape function for curvature. Œ∫·µ§ = y·µ§‚Ä≤‚Ä≤. Divided by L¬≤.
    Œ∫·µ•       :: SVector{ngp,ùï£}  # Value at gp of shape function for curvature. Œ∫·µ• = y·µ•‚Ä≤‚Ä≤. Divided by L .
    L        :: ùï£
    dL       :: SVector{ngp,ùï£}  # length associated to each Gauss point
    mat      :: Mat # used to store material properties (BeamCrossSection, for example)
end;

# For performance, `residual` will only accept differentiation to first order
Muscade.nosecondorder(::Type{<:EulerBeam3D}) = Val(true)

# Define nodes, classes, and field names of dofs
Muscade.doflist(     ::Type{<:EulerBeam3D}) = 
        (inod = (1,1,1,1,1,1, 2,2,2,2,2,2), 
         class= ntuple(i->:X,ndof), 
         field= (:t1,:t2,:t3,:r1,:r2,:r3, :t1,:t2,:t3,:r1,:r2,:r3) )

# Constructor for the EulerBeam3D element. Arguments: node list, material, and direction of the first bending axis in the global coordinate system.  
function EulerBeam3D(nod::Vector{Node};mat,orient2::SVector{ndim,ùï£}=SVector(0.,1.,0.))
    c       = coord(nod)
    ## Position of the middle of the element in the global coordinate system (as-meshed)
    c‚Çò      = SVector{ndim}((c[1]+c[2])/2)
    ## Length and tangential vector to the element in the global coordinate system  
    tg‚Çò     = SVector{ndim}( c[2]-c[1]   )
    L       = norm(tg‚Çò)
    t       = tg‚Çò/L
    ## Create t, n, b which are the longitudinal and two transverse unit vectors to the element (as-meshed). 
    ## NB: orient2, provided by the user, will define the first bending axis. 
    orient2/= norm(orient2)
    n       = orient2 - t*dot(orient2,t) 
    nn      = norm(n) 
    nn>1e-3 || muscadeerror("Provide a 'orient' input that is not nearly parallel to the element")
    n      /= nn
    b       = cross(t,n)
    r‚Çò      = SMatrix{ndim,ndim}(t...,n...,b...)
    ## Tangential vector and node coordinates in the local coordinate system
    tg‚Çë     = SVector{ndim}(L,0,0)
    ## Weight associated to each Gauss point
    # dL      = SVector{ngp }(L/2   , L/2 )
    dL    = SVector{ngp}(L/2*(18-sqrt(30))/36,L/2*(18+sqrt(30))/36  ,L/2*(18+sqrt(30))/36,L/2*(18-sqrt(30))/36  ) 
    ## Location Œ∂gp of the Gauss points for a unit-length beam element, with nodes at Œ∂nod=¬±1/2. 
    # Œ∂gp     = SVector{ngp }(-1/2‚àö3,1/2‚àö3) 
    Œ∂gp     = SVector{ngp }(-1/2*sqrt(3/7+2/7*sqrt(6/5)),-1/2*sqrt(3/7-2/7*sqrt(6/5)), +1/2*sqrt(3/7-2/7*sqrt(6/5)),+1/2*sqrt(3/7+2/7*sqrt(6/5))) 
    Œ∂nod    = SVector{nnod }(-1/2  ,1/2  )
    shapes  = (y‚Çê.(Œ∂gp), y·µ§.(Œ∂gp), y·µ•.(Œ∂gp)*L, Œ∫‚Çê.(Œ∂gp)/L, Œ∫·µ§.(Œ∂gp)/L^2, Œ∫·µ•.(Œ∂gp)/L)
    return EulerBeam3D(c‚Çò,r‚Çò,Œ∂gp,Œ∂nod,tg‚Çò,tg‚Çë,shapes...,L,dL,mat)
end;

# Define now the residual function for the EulerBeam3D element.
vec3(v,ind) = SVector{3}(v[i] for i‚ààind)


@espy function Muscade.residual(o::EulerBeam3D,   X,U,A,t,SP,dbg) 
    P,ND        = constants(X),length(X)
    X_          = motion{P}(X)
    gp_,Œµ_,v‚Çõ‚Çò_,r‚Çõ‚Çò_,v‚Çó‚ÇÇ_ = kinematics(o,X_,justinvoke)
    ‚òºŒµ          = motion‚Åª¬π{P,ND}(Œµ_  )  
    r‚Çõ‚Çò          = motion‚Åª¬π{P,ND}(r‚Çõ‚Çò_)  
    ‚ô¢Œ∫          = motion‚Åª¬π{P,ND}(v‚Çó‚ÇÇ_).*(2/o.L) 
    v·µ¢‚ÇÄ         =              (SVector(0,0,0),                                                                           )
    v·µ¢‚ÇÅ         = ND<1 ? v·µ¢‚ÇÄ : (v·µ¢‚ÇÄ...        , spin‚Åª¬π(‚àÇ0(r‚Çõ‚Çò)' ‚àò‚ÇÅ ‚àÇ1(r‚Çõ‚Çò))                                                 ) 
    v·µ¢          = ND<2 ? v·µ¢‚ÇÅ : (v·µ¢‚ÇÅ...                                   ,   spin‚Åª¬π(‚àÇ1(r‚Çõ‚Çò)' ‚àò‚ÇÅ ‚àÇ1(r‚Çõ‚Çò) + ‚àÇ0(r‚Çõ‚Çò)' ‚àò‚ÇÅ ‚àÇ2(r‚Çõ‚Çò)))  

    X‚ÇÄ          = ‚àÇ0(X)
    TX‚ÇÄ         = revariate{1}(X‚ÇÄ)
    Tgp,TŒµ,Tv‚Çõ‚Çò,Tr‚Çõ‚Çò,Tv‚Çó‚ÇÇ = kinematics(o,TX‚ÇÄ,fast)
    Œµ‚àÇX‚ÇÄ        = composeJacobian{P}(TŒµ ,X‚ÇÄ)
    v‚Çõ‚Çò‚àÇX‚ÇÄ       = composeJacobian{P}(Tv‚Çõ‚Çò,X‚ÇÄ)

    v‚Çó‚ÇÇ = motion‚Åª¬π{P,ND}(v‚Çó‚ÇÇ_).*(2/o.L)
    gp          = ntuple(ngp) do igp
        x_,Œ∫_   = gp_[igp].x, gp_[igp].Œ∫   
        ‚òºx      = motion‚Åª¬π{P,ND}(x_  )
        ‚òºŒ∫      = motion‚Åª¬π{P,ND}(Œ∫_  )

        Tx,TŒ∫   = Tgp[igp].x, Tgp[igp].Œ∫
        x‚àÇX‚ÇÄ    = composeJacobian{P}(Tx,X‚ÇÄ)
        Œ∫‚àÇX‚ÇÄ    = composeJacobian{P}(TŒ∫,X‚ÇÄ)
        f·µ¢,m·µ¢,f‚Çë,m‚Çë = ‚òºresultants(o.mat,Œµ,Œ∫,x,r‚Çõ‚Çò,v·µ¢)          # call the "resultant" function to compute loads (local coordinates) from strains/curvatures/etc. using material properties. Note that output is dual of input. 
        R       = (f·µ¢ ‚àò‚ÇÄ Œµ‚àÇX‚ÇÄ + m·µ¢ ‚àò‚ÇÅ Œ∫‚àÇX‚ÇÄ + f‚Çë ‚àò‚ÇÅ x‚àÇX‚ÇÄ + m‚Çë ‚àò‚ÇÅ v‚Çõ‚Çò‚àÇX‚ÇÄ) * o.dL[igp]     # Contribution to the local nodal load of this Gauss point  [ndof] = scalar*[ndof] + [ndim]‚ãÖ[ndim,ndof] + [ndim]‚ãÖ[ndim,ndof]
        @named(R)
    end
    R           = sum(gp·µ¢.R for gp·µ¢‚ààgp) 
    return R,noFB  
end;

# Transformation to corotated system and interpolation
function kinematics(o::EulerBeam3D,X‚ÇÄ,fast)  
    c‚Çò,r‚Çò,tg‚Çò,tg‚Çë,Œ∂nod,Œ∂gp,L  = o.c‚Çò,o.r‚Çò,o.tg‚Çò,o.tg‚Çë,o.Œ∂nod,o.Œ∂gp,o.L   # As-meshed element coordinates and describing tangential vector

    ## transformation to corotated system
    u·µß‚ÇÅ,v·µß‚ÇÅ,u·µß‚ÇÇ,v·µß‚ÇÇ  = vec3(X‚ÇÄ,1:3), vec3(X‚ÇÄ,4:6), vec3(X‚ÇÄ,7:9), vec3(X‚ÇÄ,10:12)
    v‚Çó‚ÇÇ,r‚Çõ‚Çò,v‚Çõ‚Çò        = fast(SVector(v·µß‚ÇÅ...,v·µß‚ÇÇ...)) do v
        v·µß‚ÇÅ,v·µß‚ÇÇ      = vec3(v,1:3), vec3(v,4:6)
        r‚Çõ‚ÇÅ          = fast(Rodrigues,v·µß‚ÇÅ)
        r‚Çõ‚ÇÇ          = fast(Rodrigues,v·µß‚ÇÇ)
        v‚Çó‚ÇÇ          = 0.5*Rodrigues‚Åª¬π(r‚Çõ‚ÇÇ ‚àò‚ÇÅ r‚Çõ‚ÇÅ')
        r‚Çõ‚Çò          = fast(Rodrigues,v‚Çó‚ÇÇ) ‚àò‚ÇÅ r‚Çõ‚ÇÅ ‚àò‚ÇÅ o.r‚Çò  
        v‚Çõ‚Çò          = Rodrigues‚Åª¬π(r‚Çõ‚Çò)              
        return v‚Çó‚ÇÇ,r‚Çõ‚Çò,v‚Çõ‚Çò
    end   
    c‚Çõ               = 0.5*(u·µß‚ÇÅ+u·µß‚ÇÇ)
    u‚Çó‚ÇÇ              = r‚Çõ‚Çò'‚àò‚ÇÅ(u·µß‚ÇÇ+tg‚Çò*Œ∂nod[2]-c‚Çõ)-tg‚Çë*Œ∂nod[2]    #Local displacement of node 2
    ## interpolation
    Œµ               = ‚àö((u‚Çó‚ÇÇ[1]+L/2)^2+u‚Çó‚ÇÇ[2]^2+u‚Çó‚ÇÇ[3]^2)*2/L - 1.      
    gp              = ntuple(ngp) do igp
        y‚Çê,y·µ§,y·µ•,Œ∫‚Çê,Œ∫·µ§,Œ∫·µ• = o.y‚Çê[igp],o.y·µ§[igp],o.y·µ•[igp],o.Œ∫‚Çê[igp],o.Œ∫·µ§[igp],o.Œ∫·µ•[igp]
        Œ∫           = SVector(         Œ∫‚Çê*v‚Çó‚ÇÇ[1], Œ∫·µ§*u‚Çó‚ÇÇ[2]+Œ∫·µ•*v‚Çó‚ÇÇ[3], Œ∫·µ§*u‚Çó‚ÇÇ[3]-Œ∫·µ•*v‚Çó‚ÇÇ[2])  
        y           = SVector(y‚Çê*u‚Çó‚ÇÇ[1]         , y·µ§*u‚Çó‚ÇÇ[2]+y·µ•*v‚Çó‚ÇÇ[3], y·µ§*u‚Çó‚ÇÇ[3]-y·µ•*v‚Çó‚ÇÇ[2])  
        x           = r‚Çõ‚Çò‚àò‚ÇÅ(tg‚Çë*Œ∂gp[igp]+y)+c‚Çõ+c‚Çò 
        (Œ∫=Œ∫,x=x)
    end
    return gp,Œµ,v‚Çõ‚Çò,r‚Çõ‚Çò,v‚Çó‚ÇÇ
end

