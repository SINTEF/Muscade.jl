include("Rotations.jl")

# # Euler beam element

using StaticArrays, LinearAlgebra
using Muscade

# Data structure containing the cross section material properties
struct BeamCrossSection
    EA :: ùï£
    EI :: ùï£
    GJ :: ùï£
end
    # œÅ  :: ùï£ 
    # Œº  :: ùï£ 
    # Rotation about x.... moment of inertia?
    # Cd :: SVector{3,ùï£}
    # Ca :: SVector{3,ùï£}
    # A  :: SVector{3,ùï£}

BeamCrossSection(;EA=EA,EI=EI,GJ=GJ) = BeamCrossSection(EA,EI,GJ);

# Resultant function that computes the internal loads from the strains and curvatures, and external loads on the element. 
@espy function resultants(o::BeamCrossSection,Œµ,Œ∫,x·µß,rot,::Val{P},::Val{ND}) where{P,ND}
    Œµ‚ÇÄ          = Muscade.position{P,ND}(Œµ) 
    Œ∫‚ÇÄ          = Muscade.position{P,ND}(Œ∫) 
    # x·µß‚ÇÄ,x·µß‚ÇÅ,x·µß‚ÇÇ = Muscade.posVelAcc{P,ND}(x·µß)
    # x‚Çó‚ÇÅ = x·µß‚ÇÅ ‚àò rot
    # x‚Çó‚ÇÇ = x·µß‚ÇÇ ‚àò rot
    # œÅ = 1025.0
    # Cd = SVector(0.0,1.0,1.0)
    # Cd = SVector(0.0,0.0,0.0)
    # A  = SVector(0.0,1.0,1.0)
    # fd = .5 * œÅ .* A .* Cd .* x‚Çó‚ÇÅ .* abs.(x‚Çó‚ÇÅ) #mind the sign: forces exerted by element on its environment
    # Œº   = 1.0
    # fi = Œº * x‚Çó‚ÇÇ 
    # Ca = SVector(0.0,1.0,1.0)
    # Ca = SVector(0.0,0.0,0.0)
    # fa = œÅ * Ca .* x‚Çó‚ÇÇ
    ‚òºf‚ÇÅ = o.EA*Œµ‚ÇÄ # replace by Œµ‚ÇÄ
    ‚òºm  = SVector(o.GJ*Œ∫‚ÇÄ[1],o.EI*Œ∫‚ÇÄ[2],o.EI*Œ∫‚ÇÄ[3])# replace by Œ∫‚ÇÄ 
    ‚òºf‚Çë = SVector(0.,0.,0.) #fd+fi+fa # SVector(0.,0.,0.) # external forces at Gauss point (no external moment/torque/... so far). f‚Çë is in local coordinates # add inertia and drag
    return f‚ÇÅ,m,f‚Çë
end;

# Static Euler beam element, with two nodes, two Gauss points and 12 degrees of freedom. 
const ngp        = 2
const ndim       = 3
const ndof       = 12
const nnod       = 2;

# Shape functions for a beam element with support Œ∂‚àà[-1/2,1/2]. Though the shape function matrices are sparse, do not "unroll" them.  That would be faster but considerably clutter the code                          
# N‚Çê·µ¢ is the displacement field induced by node i's axial translations (also the rotation induced by node i's rotation about the element's direction/torsion)
N‚Çê‚ÇÅ(Œ∂) =                    -Œ∂ +1/2                          
N‚Çê‚ÇÇ(Œ∂) =                     Œ∂ +1/2;                 
# N·µ§·µ¢ is the deflection field induced by node i's transverse displacements
N·µ§‚ÇÅ(Œ∂) =  2Œ∂^3          -3/2*Œ∂ +1/2              
N·µ§‚ÇÇ(Œ∂) = -2Œ∂^3          +3/2*Œ∂ +1/2;          
# N·µ•·µ¢ is the deflection field induced by node i's rotations (bending, not torsion)
N·µ•‚ÇÅ(Œ∂) =   Œ∂^3 -1/2*Œ∂^2 -1/4*Œ∂ +1/8          
N·µ•‚ÇÇ(Œ∂) =   Œ∂^3 +1/2*Œ∂^2 -1/4*Œ∂ -1/8;          

# First derivatives ‚àÇN/‚àÇŒ∂ used to compute strain and torsion. For an element of length L, use ‚àÇN/‚àÇx=‚àÇN/‚àÇŒ∂/L.
B‚Çê‚ÇÅ(Œ∂) = -1        
B‚Çê‚ÇÇ(Œ∂) =  1;
# Second derivatives ‚àÇ¬≤N/‚àÇŒ∂¬≤ used to compute curvature. For an element of length L, use ‚àÇ¬≤N/‚àÇx¬≤=‚àÇ¬≤N/‚àÇŒ∂¬≤/L¬≤.
B·µ§‚ÇÅ(Œ∂) =   12Œ∂
B·µ•‚ÇÅ(Œ∂) =    6Œ∂-1
B·µ§‚ÇÇ(Œ∂) =  -12Œ∂  
B·µ•‚ÇÇ(Œ∂) =    6Œ∂+1;

# Data structure describing an EulerBeam3D element as meshed
struct EulerBeam3D{Mat} <: AbstractElement
    c‚Çò       :: SVector{3,ùï£}    # Position of the middle of the element
    r‚Çò       :: Mat33{ùï£}        # Orientation of the element (see code)
    Œ∂gp      :: SVector{ngp,ùï£}  # Location of the Gauss points for the normalized element with length 1
    Œ∂nod     :: SVector{nnod,ùï£} # Location of the nodes for the normalized element with length 1
    tg‚Çò      :: SVector{ndim,ùï£} # Tangent vector connecting the nodes of the element in the global coordinate system at mesh time
    tg‚Çë      :: SVector{ndim,ùï£} # Tangent vector connecting the nodes of the element in the local coordinate system (element coordinate system)
    NŒµ       :: SVector{ngp,SVector{     ndof,ùï£}}           # strain at the Gauss points
    NŒ∫       :: SVector{ngp,SMatrix{ndim,ndof,ùï£,ndim*ndof}} # curvatures at the Gauss points
    NŒ¥x      :: SVector{ngp,SMatrix{ndim,ndof,ùï£,ndim*ndof}} # coordinates of the Gauss points
    dL       :: SVector{ngp,ùï£}  # length associated to each Gauss point
    mat      :: Mat # Used to store material properties (BeamCrossSection, for example)
end

# Define nodes, classes, and field names for Muscade
Muscade.doflist(::Type{<:EulerBeam3D}) = (inod = (1,1,1,1,1,1, 2,2,2,2,2,2), class= ntuple(i->:X,ndof), field= (:t1,:t2,:t3,:r1,:r2,:r3, :t1,:t2,:t3,:r1,:r2,:r3) )

# Define now the constructor for the EulerBeam3D element. Arguments: node coordinates and direction of the first bending axis in the global coordinate system.  
function EulerBeam3D(nod::Vector{Node};mat,orient2::SVector{ndim,ùï£}=SVector(0.,1.,0.))
    c       = coord(nod)
    ## Position of the middle of the element in the global coordinate system (as-meshed)
    c‚Çò      = SVector{ndim}((c[1]+c[2])/2)
    ## Length and tangential vector to the element in the global coordinate system  
    tg‚Çò     = SVector{ndim}( c[2]-c[1]   )
    L       = norm(tg‚Çò)
    t       = tg‚Çò/L
    ## Create t, n, b which are the longitudinal and two transverse unit vectors to the element (as-meshed). 
    ## NB: orient2, provided by the user, will define the first bending axis. 
    orient2/= norm(orient2)
    n       = orient2 - t*dot(orient2,t) 
    nn      = norm(n) 
    nn>1e-3 || muscadeerror("Provide a 'orient' input that is not nearly parallel to the element")
    n      /= nn
    b       = cross(t,n)
    r‚Çò      = SMatrix{ndim,ndim}(t...,n...,b...)
    ## Tangential vector and node coordinates in the local coordinate system
    tg‚Çë     = SVector{ndim}(L,0,0)
    ## Length associated to each Gauss point
    dL      = SVector{ngp }(L/2   , L/2 )
    ## Location of the Gauss points for a unit-length beam element, with nodes at ¬±1/2. 
    Œ∂gp     = SVector{ngp }(-1/2‚àö3,1/2‚àö3) # Œ∂‚àà[-1/2,1/2]
    Œ∂nod    = SVector{ngp }(-1/2  ,1/2  ) # Œ∂‚àà[-1/2,1/2]
    L¬≤      = L^2
    ## Using the first derivative of the shape function to get the strain at Gauss points 
    NŒµ      = SVector{ngp}(@SVector [B‚Çê‚ÇÅ(Œ∂·µ¢)/L,0,         0,         0,         0,          0,         B‚Çê‚ÇÇ(Œ∂·µ¢)/L,0,         0,          0,          0,          0         ] for Œ∂·µ¢‚ààŒ∂gp)  # NŒµ[igp][idof]
    ## Using the first and second derivatives of the shape function to get the torsion and curvature at Gauss points
    NŒ∫      = SVector{ngp}(@SMatrix [0         0          0          B‚Çê‚ÇÅ(Œ∂·µ¢)/L  0           0          0         0          0           B‚Çê‚ÇÇ(Œ∂·µ¢)/L   0           0         ;
                                     0         B·µ§‚ÇÅ(Œ∂·µ¢)/L¬≤ 0          0          0           B·µ•‚ÇÅ(Œ∂·µ¢)/L 0         B·µ§‚ÇÇ(Œ∂·µ¢)/L¬≤ 0           0           0           B·µ•‚ÇÇ(Œ∂·µ¢)/L;
                                     0         0          B·µ§‚ÇÅ(Œ∂·µ¢)/L¬≤ 0          -B·µ•‚ÇÅ(Œ∂·µ¢)/L 0          0         0          B·µ§‚ÇÇ(Œ∂·µ¢)/L¬≤  0           -B·µ•‚ÇÇ(Œ∂·µ¢)/L  0         ] for Œ∂·µ¢‚ààŒ∂gp) # NŒ∫[igp][idim,idof]
    ## Using the shape functions to get the coordinates of the Gauss points
    NŒ¥x      = SVector{ngp}(@SMatrix [N‚Çê‚ÇÅ(Œ∂·µ¢)   0          0          0          0           0          N‚Çê‚ÇÇ(Œ∂·µ¢)   0          0           0           0           0         ;
                                     0         N·µ§‚ÇÅ(Œ∂·µ¢)    0          0          0           N·µ•‚ÇÅ(Œ∂·µ¢)    0         N·µ§‚ÇÇ(Œ∂·µ¢)    0           0           0           N·µ•‚ÇÇ(Œ∂·µ¢)   ;
                                     0         0          N·µ§‚ÇÅ(Œ∂·µ¢)    0          -N·µ•‚ÇÅ(Œ∂·µ¢)    0          0         0          N·µ§‚ÇÇ(Œ∂·µ¢)     0           -N·µ•‚ÇÇ(Œ∂·µ¢)    0         ] for Œ∂·µ¢‚ààŒ∂gp) # NŒ¥x[igp][idim,idof]
    return EulerBeam3D(c‚Çò,r‚Çò,Œ∂gp,Œ∂nod,tg‚Çò,tg‚Çë,NŒµ,NŒ∫,NŒ¥x,dL,mat)
end

const saco = StaticArrays.sacollect
const v3   = SVector{3};

# Define now the residual function for the EulerBeam3D element.
@espy function Muscade.residual(o::EulerBeam3D,   X,U,A,t,SP,dbg) 
    ## Fetch the element properties 
    c‚Çò,r‚Çò,tg‚Çò,tg‚Çë     = o.c‚Çò,o.r‚Çò,o.tg‚Çò,o.tg‚Çë   # As-meshed element coordinates and describing tangential vector
    NŒµ,NŒ∫,NŒ¥x         = o.NŒµ,o.NŒ∫,o.NŒ¥x           # From shape functions
    Œ∂gp,Œ∂nod,dL      = o.Œ∂gp,o.Œ∂nod,o.dL        # Gauss points coordinates, node coordinates and length associated to each Gauss point
    ## In the following, the goal is to compute the Jacobian T transforming quantities from/to local/global coordinate systems using automatic differentiation
    P                = constants(X)
    ND               = length(X)
    X_               = Muscade.motion{P}(X)
    # X__               = Muscade.position{P,ND}(X_)
    ## Œ¥X_l and T contain time derivatives, c‚Çõ,r‚Çõ‚Çò do not
    Œ¥X‚Çó,T,c‚Çõ,r‚Çõ‚Çò      = coordinateTransform(X_,o)
    ## Compute local load contributions at each Gauss point
    gp              = ntuple(ngp) do igp
        ‚òºŒµ,‚òºŒ∫,‚òºŒ¥x‚Çó   = NŒµ[igp]‚àòŒ¥X‚Çó, NŒ∫[igp]‚àòŒ¥X‚Çó, NŒ¥x[igp]‚àòŒ¥X‚Çó   # axial strain, curvatures, displacement - all local (including their time derivatives)
        ‚òºx          = r‚Çõ‚Çò‚àò(tg‚Çë*Œ∂gp[igp]+Œ¥x‚Çó)+c‚Çõ+c‚Çò             # [ndim], global coordinates of Gauss points
        f‚ÇÅ,m,f‚Çë     = ‚òºresultants(o.mat,Œµ,Œ∫,x,r‚Çõ‚Çò,Val(P),Val(ND))          # call the "resultant" function to compute loads (local coordinates) from strains/curvatures/etc. using material properties. Note that output is dual of input. 
        R‚Çó           = (f‚ÇÅ ‚àò‚ÇÄ NŒµ[igp] + m‚àòNŒ∫[igp] + f‚Çë‚àòNŒ¥x[igp])*dL[igp]     # Contribution to the local nodal load of this Gauss point  [ndof] = scalar*[ndof] + [ndim]‚ãÖ[ndim,ndof] + [ndim]‚ãÖ[ndim,ndof]
        @named(R‚Çó)
    end
    ## Summation of local load contributions from each Gauss point, and transformation to the global coordinate system. 
    R  = sum(gp·µ¢.R‚Çó for gp·µ¢‚ààgp) ‚àò T 
    return R,noFB  
end


function coordinateTransform(X,o::EulerBeam3D)
    ## P is an integer that enables variate to keep track with respect to what X,U,A,t have been differentated before. Note that P is defined at compilation time. No run time. 
    P                = constants(X) 
    ## We are going do differentiate wrt X (to get the Jacobian T for example). 
    ## Describe here the content of ŒîX contains (zeros and ones)
    ŒîX               = variate{P,ndof}(X)
    ## Note that X is a tuple containing (positions, velocities, accelerations) and ‚àÇ0(X) returns only positions
    ## X is not an adiff with respect to time. Use motions to go from tuple to adiff. Do not forget constants, ses motions doc. 
    ## Fetch the nodal displacements u·µß‚ÇÅ u·µß‚ÇÇ and rotations v·µß‚ÇÅ, v·µß‚ÇÇ from X, expressed in the global coordinate system
    u·µß‚ÇÅ,v·µß‚ÇÅ,u·µß‚ÇÇ,v·µß‚ÇÇ  = SVector{3}(ŒîX[i] for i‚àà1:3), SVector{3}(ŒîX[i] for i‚àà4:6),SVector{3}(ŒîX[i] for i‚àà7:9),SVector{3}(ŒîX[i] for i‚àà10:12)
    ## Conversion to the local coordinate system
    c‚Çõ               = (u·µß‚ÇÅ+u·µß‚ÇÇ)/2
    # From rotation vector to rotation matrix
    r‚Çõ               = Rodrigues((v·µß‚ÇÅ+v·µß‚ÇÇ)/2)
    # The following accounts for the fact that the element when rotations. Ensures that the x is colinear with the vector joining the two nodes
    r‚Çõ               = Rodrigues(adjust(r‚Çõ‚àòo.tg‚Çò,o.tg‚Çò+u·µß‚ÇÇ-u·µß‚ÇÅ))‚àòr‚Çõ   
    # Total rotation of the element (as meshed to now)
    r‚Çõ‚Çò              = r‚Çõ‚àòo.r‚Çò
    u‚Çó‚ÇÅ              = r‚Çõ‚Çò'‚àò(u·µß‚ÇÅ+o.tg‚Çò*o.Œ∂nod[1]-c‚Çõ)-o.tg‚Çë*o.Œ∂nod[1]    #Local displacement of node 1. o.tg‚Çò*o.Œ∂nod[1] connects the middle of the element to node 1 at mesh time. u\gamma_1 - c_s instantaneous displacement
    u‚Çó‚ÇÇ              = r‚Çõ‚Çò'‚àò(u·µß‚ÇÇ+o.tg‚Çò*o.Œ∂nod[2]-c‚Çõ)-o.tg‚Çë*o.Œ∂nod[2]    #Local displacement of node 2
    v‚Çó‚ÇÅ              = Rodrigues‚Åª¬π(r‚Çõ‚Çò'‚àòRodrigues(v·µß‚ÇÅ)‚àòo.r‚Çò)      #Local rotation of node 1
    v‚Çó‚ÇÇ              = Rodrigues‚Åª¬π(r‚Çõ‚Çò'‚àòRodrigues(v·µß‚ÇÇ)‚àòo.r‚Çò)      #Local rotation of node 2
    ## Œ¥X‚Çó contains all local displacements ("value") and partial derivatives ("Œ¥") with respect to ŒîX, T=‚àÇX‚Çó/‚àÇŒîX
    Œ¥X‚Çó,T            = value_‚àÇ{P,ndof}(SVector(u‚Çó‚ÇÅ...,v‚Çó‚ÇÅ...,u‚Çó‚ÇÇ...,v‚Çó‚ÇÇ...))
    c‚Çõ               = value{P}(c‚Çõ)
    r‚Çõ‚Çò              = value{P}(r‚Çõ‚Çò)
    return Œ¥X‚Çó,T,c‚Çõ,r‚Çõ‚Çò 
end